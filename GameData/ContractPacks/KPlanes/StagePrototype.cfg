// -*- conf-javaprop -*-
//
// PROTOTYPE for staging/payload contracts.
//

CONTRACT_TYPE
{

	sortKey = a000

//REQUIREMENTS FOR CONTRACT TO APPEAR

//DATA NODES TO PROCESS FOR CONTRACT USE

	DATA
	{
		type = string
		craft = KPlanesCraft_Start_000
	}

//CONTRACT DESCRIPTION

	name = Start-StagingPrototype
	title = PROTOTYPE: Stage/payload prototype contract
	group = KPlanes_Start
	agent = Wright Aeronautical

	description = PROTOTYPE: Used to test stage/payload style contracts.
	synopsis = Prototype.
	notes = Prototype.
	completedMessage = Completed.

//Contract Limits
	maxCompletions = 1000
	maxSimultaneous = 1
//	weight = 100.0

	autoAccept = false
	declinable = true
	cancellable = true

	minExpiry = 0.0
	maxExpiry = 0.0
	deadline = 0

//Contract Reward Modifiers
	prestige = Trivial
	targetBody = HomeWorld()

//Contract Rewards
	advanceFunds = 0 * @KPlanes:RewardAdvanceFunds
	rewardFunds = 0 * @KPlanes:RewardFunds
	rewardReputation = 0 * @KPlanes:RewardReputation
	rewardScience = 0 * @KPlanes:RewardScience

//Contract Penalties
	failureFunds = 0 * @KPlanes:FailureFunds
	failureReputation = 0 * @KPlanes:FailureReputation

//BEHAVIOURS TO DO WHEN CREATING CONTRACT

//PARAMETERS FOR CONTRACT COMPLETION

//LAUNCH STATE
	PARAMETER
	{
		name = LaunchingParam
		type = VesselParameterGroup
		title = Launching parameter group

		define = @/craft

		PARAMETER
		{
			name = ReachState
			type = ReachState

			targetBody = HomeWorld()
			situation = PRELAUNCH
		}

		disableOnStateChange = true
		// hidden = true
		// hideChildren = true
	}

	BEHAVIOUR
	{
		name = LaunchingStateCompute
		type = Expression

		PARAMETER_COMPLETED
		{
			parameter = LaunchingParam
			type = Vessel
			CC_LaunchVessel = @/craft
		}

//		PARAMETER_COMPLETED
//		{
//			parameter = LaunchingParam
//			CC_LaunchOtherVessels = AllVessels().Exclude($CC_LaunchVessel)
//		}

//		PARAMETER_COMPLETED
//		{
//			parameter = LaunchingParam
//			type = List<AvailablePart>
//		        CC_LaunchParts = $CC_LaunchVessel.Parts()
//		}
	}

//Craft definition
	PARAMETER
	{
		name = StagingParam
		type = VesselParameterGroup
		title = Your flying machine must
		completedMessage = You succesfully staged the payload.
		
		vessel = @/craft
		dissassociateVesselsOnContractCompletion = true

		PARAMETER
		{
			name = Not
			type = Not
			title = stage with an appropriate payload.

			hideChildren = true

			PARAMETER
			{
				name = NoStaging
				type = NoStaging

				failContract = false
			}
		}

		disableOnStateChange = false
	}

	BEHAVIOUR
	{
		name = StagingStateCompute
		type = Expression

//		PARAMETER_COMPLETED
//		{
//			parameter = StagingParam
//			type = List<AvailablePart>
//		        CC_StagingParts = $CC_LaunchParts.ExcludeAll($CC_LaunchVessel.Parts())
//		}
//
		PARAMETER_COMPLETED
		{
			parameter = StagingParam

			CC_StagingAllVessels = AllVessels()
//			CC_StagingNewVessels = ExcludeAll($CC_LaunchOtherVessels)
//			CC_StagingNewVesselsWithParts = $CC_StagingNewVessels.Where(v => v.Parts().Count() == v.Parts().Where(p => $CC_StagingParts.Contains(p)).Count())
		}
//
//		PARAMETER_COMPLETED
//		{
//			parameter = StagingParam
//			type = Vessel
//			CC_StagingVessel = $CC_StagingNewVesselsWithParts.First()
//		}
	}

//Contract Goals

//Recovery Parameter - Landing

//Recovery Parameter - Craft & Kerbal Safety Check
}
