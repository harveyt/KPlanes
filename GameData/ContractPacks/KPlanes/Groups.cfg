// -*- conf-javaprop -*-
//
// Groups for K-Planes contracts.
//

CONTRACT_GROUP
{
	name = KPlanes
	displayName = K-Planes
	minVersion = 2.0.0
	agent = SSI Aerospace

// TODO: Undo once testing done?
//	maxCompletions = 1
//	maxSimultaneous = 3		// Allows Speed, Height and Distance in one go, but not too crazy.

	CONTRACT_GROUP
	{
		name = KPlanes_Start
		displayName = Basic Plane Development
		minVersion = 2.0.0
		agent = Wright Aeronautical
		tip = Building K-Planes...
		sortKey = a01
	}

	CONTRACT_GROUP
	{
		name = KPlanes_Early
		displayName = Early K-Plane Development
		minVersion = 2.0.0
		agent = KACA
		tip = Launching K-Plane from another plane...
		sortKey = a02
	}

	CONTRACT_GROUP
	{
		name = KPlanes_Modern
		displayName = Modern K-Planes and Shuttles, early SSTOs
		minVersion = 2.0.0
		agent = KASA
		tip = Adding more wings to K-Planes...
		sortKey = a03
	}	

	CONTRACT_GROUP
	{
		name = KPlanes_Future
		displayName = Futuristic K-Planes, Shuttles, and SSTOs
		minVersion = 2.0.0
		agent = SSI Aerospace
		tip = Imagining futuristic space planes that Buck Rogers would fly...
		sortKey = a04
	}

	DATA
	{
		type = double
		title = Scaling adjustments
		requiredValue = false

		Scale = HomeWorld().Radius() / 600000.0
		PI = 3.141592653589793238
	}

	DATA
	{
		type = double
		title = Reward scaling
		requiredValue = false

		// Reward scale is sqrt(scale). Stock = 1.0, KSRSS = 1.6, RSS = 3.3
		RewardScale		= Round(Pow(@Scale, 0.5), 0.1)

		// Only funds are scaled to planet, as contracts are mostly about money.
		RewardAdvanceFunds	=  200.0	* @RewardScale
		RewardFunds		= 1000.0	* @RewardScale
		RewardReputation	=    1.0
		RewardScience		=    1.0
		FailureFunds		=  800.0	* @RewardScale
		FailureReputation	=    1.0
	}

	DATA
	{
		// Altitude (km)
		type = double
		title = Altitude scaling
		requiredValue = false

		// Stock Values
		FlyingHigh		= Round(HomeWorld().FlyingAltitudeThreshold() / 1000.0, 1.0)
		SpaceLow		= Round(HomeWorld().AtmosphereAltitude() / 1000.0, 1.0)
		SpaceHigh		= Round(HomeWorld().SpaceAltitudeThreshold() / 1000.0, 1.0)

		// Identifiers
		// This is all rough, not based on reality
		TroposphereLow		= Round(@FlyingHigh * 0.1389, 1.0)
		TroposphereHigh		= Round(@FlyingHigh * 0.2778, 1.0)
		StratosphereLow		= Round(@FlyingHigh * 0.4000, 1.0)
		StratosphereHigh	= Round(@FlyingHigh * 0.7000, 1.0)
		
		MesosphereLow		= @FlyingHigh
		MesosphereHigh		= Round((@SpaceLow - @FlyingHigh) * 0.1944 + @FlyingHigh, 5.0) 
		ThermosphereLow		= Round((@SpaceLow - @FlyingHigh) * 0.3990 + @FlyingHigh, 5.0) 

		SpaceLEO		= Round((@SpaceHigh - @SpaceLow)  * 0.1265 + @SpaceLow, 10.0) 
		SpaceMEO		= @SpaceHigh
		// SpaceGEO		= <<Compute using Orbit Generator>>
	}

	DATA
	{
		// Speed (m/s)
		type = double
		title = Speed scaling
		requiredValue = false

		Mach			= 343		// (m/s) Speed of sound at sea level, plus a bit

		// Identifiers
		Mach1			= @Mach * 1.0
		Mach2			= @Mach * 2.0
		Mach3			= @Mach * 3.0
		Mach4			= @Mach * 4.0
		Mach5			= @Mach * 5.0
	}

	DATA
	{
		// Distance (km)
		type = double
		title = Distance scaling
		requiredValue = false

		Circumference		= 2.0 * @PI * HomeWorld().Radius()	// (m) Homeworld circumference

		// Identifiers
		ShortHop		= Round(@Circumference / 75000.0, 10.0)
		Domestic		= Round(@Circumference / 40000.0, 50.0)
		Continental		= Round(@Circumference / 15000.0, 100.0)
		Intercontinental	= Round(@Circumference / 5000.0,  250.0)
		Polar			= Round(@Circumference / 2000.0)
	}
}
