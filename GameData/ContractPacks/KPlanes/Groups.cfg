// -*- conf-javaprop -*-
//
// Groups for K-Planes contracts.
//

CONTRACT_GROUP
{
	name = KPlanes
	displayName = K-Planes
	minVersion = 2.0.0
	agent = SSI Aerospace

// TODO: Undo once testing done?
//	maxCompletions = 1
//	maxSimultaneous = 3		// Allows Speed, Height and Distance in one go, but not too crazy.

	CONTRACT_GROUP
	{
		name = KPlanes_Start
		displayName = Basic Plane Development
		minVersion = 2.0.0
		agent = Wright Aeronautical
		tip = Building K-Planes...
		sortKey = a01
	}

	CONTRACT_GROUP
	{
		name = KPlanes_Early
		displayName = Early K-Plane Development
		minVersion = 2.0.0
		agent = KACA
		tip = Launching K-Plane from another plane...
		sortKey = a02
	}

	CONTRACT_GROUP
	{
		name = KPlanes_Modern
		displayName = Modern K-Planes and Shuttles, early SSTOs
		minVersion = 2.0.0
		agent = KASA
		tip = Adding more wings to K-Planes...
		sortKey = a03
	}	

	CONTRACT_GROUP
	{
		name = KPlanes_Future
		displayName = Futuristic K-Planes, Shuttles, and SSTOs
		minVersion = 2.0.0
		agent = SSI Aerospace
		tip = Imagining futuristic space planes that Buck Rogers would fly...
		sortKey = a04
	}

	DATA
	{
		type = double
		title = Scaling adjustments
		requiredValue = false

		Scale = HomeWorld().Radius() / 600000.0
		PI = 3.141592653589793238
	}

	DATA
	{
		type = double
		title = Reward scaling
		requiredValue = false

		RewardAdvanceFunds	= 1000.0	* @Scale
		RewardFunds		= 5000.0	* @Scale
		RewardReputation	= 2.0		* @Scale
		RewardScience		= 1.0		* @Scale
		FailureFunds		= 4000.0	* @Scale
		FailureReputation	= 1.0		* @Scale
	}

	DATA
	{
		type = double
		title = Altitude scaling
		requiredValue = false

		FlyingHigh		= Round(HomeWorld().FlyingAltitudeThreshold() / 1000.0)
		SpaceLow		= Round(HomeWorld().AtmosphereAltitude() / 1000.0)
		SpaceHigh		= Round(HomeWorld().SpaceAltitudeThreshold() / 1000.0)

		// This is all rough, not based on reality
		TroposphereLow		= Round(@FlyingHigh * 0.3333)
		TroposphereHigh		= Round(@FlyingHigh * 0.5)
		StratosphereLow		= @FlyingHigh
		StratosphereHigh	= Round((@SpaceLow - @FlyingHigh) * 0.3333) + @FlyingHigh
		MesosphereLow		= Round((@SpaceLow - @FlyingHigh) * 0.5000) + @FlyingHigh
		MesosphereHigh		= Round((@SpaceLow - @FlyingHigh) * 0.6666) + @FlyingHigh

		// Orbital heights, GEO has to be computed from an orbit generator
		SpaceLEO		= Round(@SpaceLow * 1.2)
	}

	DATA
	{
		type = double
		title = Speed scaling
		requiredValue = false

		Mach			= 343		// (m/s) Speed of sound at sea level, plus a bit
	}

	DATA
	{
		type = double
		title = Distance scaling
		requiredValue = false

		Circum			= 2.0 * @PI * HomeWorld().Radius()	// (m) Homeworld circumference
	}
}
