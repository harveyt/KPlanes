-*- mode: org; mode: auto-fill; fill-column: 80; -*-
#+TITLE: K-Planes Tasks
#+STARTUP: indent overview
#+TODO: TODO DEFER | DONE

* DONE [5/5] Version 0.1.0
- Just one contract, enough to check how to do the basics.
- Some details copied and modified from GAP.
  
** DONE Add Agencies, Contract Groups, basic mod structure
** DONE Add KACA agency logo from NACA
** DONE Add KASA agency logo from NASA
** DONE Add Makefile build and test system
** DONE Add first contract type and fix bugs

* TODO [23/44] Version 0.2.0

** DONE Add all GAP milestone contracts
- Including Heli and Seaplane too
- Not yet converted to planet agnostic
** DONE Would it make sense to group all K-Planes groups into one?
** DONE Generate milestone contracts from ContractTable.csv
- Use python
- Add to build system
** DONE Add reward scaling
- Based on distance/speed/altitude  
** DONE Move data into Groups sub-dir
** DONE Agent names have to be real names, not ids.
** DONE Only add Agent if one with same name does not exist.
- &AGENT[KASA]:LAST[KPlanes]
** DONE Why is second contract not acceptable?
** DONE Better format for altitude
- AltMin = 1000 (double)
- NameAltMin = Troposhere Low
- PrettyAltMin = "10km (Troposphere Low)"
- AltMax similar
- PrettyAltLimits =
  - AltMin only :: "above 10km (Troposphere Low)"
  - AltMax only :: not allowed, either min or min/max
  - AltMin & AltMax :: "between 10km and 20km (Troposphere Low)"
    - Latter name is taken from min
- Use similar for SpeedMin/SpeedMax, DistMin, DistMax
  - Use names for speeds: Mach1
  - Use names for distance: ShortHop, Domestic, Continental, Intercontinental,
    Polar, CircumnavigatePolar, Circumnavigate
** DONE Ensure localized strings use Pretty versions
"asdasd".Format(...)
- How to do this?
** DONE Add atmosphere scaling
- Based on Stock, 2.5/2.7 or RSS scaling
- Troposphere, Stratosphere, Karman Line/Space
** DONE Better height definitions:

| Squad      | KPlanes          | Stock Alt | Equation                     | Stock Value | RSS Value | Actual |
|------------+------------------+-----------+------------------------------+-------------+-----------+--------|
| FlyingLow  | TroposphereLow   |           | Round(FH * 0.1000)           |           1 |         5 |        |
| FlyingLow  | TroposphereHigh  |           | Round(FH * 0.1700)           |           3 |         8 |        |
| FlyingLow  | StratosphereLow  |           | Round(FH * 0.2400)           |           5 |        12 |     12 |
| FlyingLow  | StratosphereHigh |           | Round(FH * 0.5000)           |           9 |        25 |        |
|------------+------------------+-----------+------------------------------+-------------+-----------+--------|
| FlyingHigh | MesosphereLow    |        18 | FH                           |          18 |        50 |     50 |
| FlyingHigh | MesosphereHigh   |           | Round((SL-FH) * 0.3500) + FH |          36 |        67 |        |
| FlyingHigh | ThermosphereLow  |           | Round((SL-FH) * 0.7000) + FH |          54 |        85 |     85 |
| FlyingHigh | ThermosphereHigh |           | Round((SL-FH) * 0.8500) + FH |          62 |        92 |        |
|------------+------------------+-----------+------------------------------+-------------+-----------+--------|
| SpaceLow   | KarmanLine       |        70 | SL                           |          70 |       100 |    100 |
| SpaceLow   | SpaceLEO         |           | Round((SH-SL) * 0.1265) + SL |          92 |           |    340 |
|------------+------------------+-----------+------------------------------+-------------+-----------+--------|
| SpaceHigh  | SpaceMEO         |       250 | SH                           |         250 |           |   2000 |
| SpaceHigh  | SpaceGEO         |      2868 | SGEO                         |        2868 |     35786 |  35786 |
|------------+------------------+-----------+------------------------------+-------------+-----------+--------|
| SOI        | SpaceSOI         |     84159 | SOI                          |       84159 |           |    N/A |

- SpaceLEO :: Uses the ISS height, since LEO is actually 140 to 2000 in real world.

** DONE Change requirements in table to be just contract name (so more can be added)
** DONE Change reward scale to seperate coloumns: Funds, Science and Reputation
- These are values assuming scale = 1, so easy to balance
- Take them from existing contracts
** DONE Move "Mid Stage" to right of Style, as "Style Param"
- For Land - is a Biome, "Mountain" or "Hovering" are special
** DONE Initial distance values may be too big for non-stock
- Check real scale makes sense in real life, see if stock works (1/10th)
** DONE Check real scale rewards are not scaled too high
- Scale only reward funds by sqrt(scale).
** DONE Change initial height and speed records to absolute (?)
- Speed in table is m/s, Mach1 etc. are computed (or hard coded)
** DONE Enable speed style contract
- Update FlyingFaster
** DONE Enable land style contract
- Update Heli and Seaplane equivalent
** DONE Add basic GAP contracts
- Ensure requirements are valid GAP contracts:
  - Set "enabled" to true if generated
  - Must have enabled requirement contract types.
** DONE How to do distance?
- Use Waypoint Generator to create waypoint with suitable min/max distance from launch
  site.
** DONE Change distance markers to half distance
** TODO Change loc entries to use @vars not Format
** TODO Ensure distances are always rounded 1000m (ie. pretty 10km)
** TODO Ensure speeds are always rounded 1m/s (ie. pretty 10m/s)
** TODO Ensure alts are always rounded 500m min if less than 10000, 1km greater
** TODO Change PrettyXXX to use ToString
- eg. for alt:: d >= 10000 ? ToString("#,#,,.#") + "km" : ToString("#,#") + "m"
** TODO Extract localized data from GAP into loc file
** TODO Change speed records to computed Mach values
- Rather than Mach 1 which is height dependant
- Possibly have Mach 1, Mach 3 and Mach 5 as targets but very fixed for altitude
  (where they make sense) with equivalent surface speed
- To emulate X-1, X-15, SR-71 style records
- Vessel.mach and CelestialBody can compute this based on pressure,temp,density
  - Might have to have code to do this properly?
  - Until then fixed number?
** TODO Ensure craft do not misuse rockets
- Jets are always allowed, change field to "Rockets?"
- Some contracts allow for rockets
  - Rockets can only be used above a min altitude (specific to contract)
  - Check by ensuring resource usage of oxidizer is zero (?)
** TODO Pole / Equatorial distance
- For pole :: must reach pole waypoint and return to KSC
- For around the world :: place waypoint 90 W, 270 W on equator then return to
  KSC
- Possibly calculate great circle with start point and 90 W?
** TODO Ensure craft do not misuse staging
- Allow staging for some contracts.
** TODO Ensure craft do not misuse parachutes
- Parachutes can only be used after landing.
** TODO Add description/notes for limitations:
- No rockets (unless allowed)
- No staging (unless allowed, or for payload)
- No parachute usage until landed
** TODO How to do air launch?
- Allow one staging event
- Before staging, whole craft is validated
- Staging must occur:
  - Above a certain height
  - Remaining craft is then validated again
- Player must also land other aircraft
** TODO How to do payload delivery?
- Allow one staging event
- Must occur above a certain height
- Primary craft is validated
- Secondary craft can be made of anything, but must exceed payload mass
- Player must land primary
- Must create a new vessel with only parts from launcher
  - Behaviour and expressions with parameter completion to record on launch
  - Behaviour and expressions to check after orbit, when no staging fails (allowed)
- New vessel remains in orbit
- Launcher returns
** TODO Add support for "realistic" agents and naming
- NACA and NASA
- Changes to descriptions
- Change K-Planes to X-Planes (mod name does not change)
** TODO Provide stock example craft for some records
** TODO Provide modded example craft for some records
** TODO Add more localization
- between/above/below loc
- etc.
** TODO Add automated GitHub release
** TODO Add CKAN information
** TODO Add automated SpaceDock release

* Contract Table

- See ContractTable.csv
